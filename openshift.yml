---

- hosts: localhost
  gather_facts: no
  tags: always
  tasks:
  - add_host:
      name: "{{ item }}"
      groups: oo_all_hosts
    with_items: "{{ g_all_hosts | default([]) }}"
  - add_host:
      name: "{{ item }}"
      groups: etcd
    with_items: "{{ g_etcd_hosts | default([]) }}"
  - add_host:
      name: "{{ item }}"
      groups: masters
    with_items: "{{ g_master_hosts | default([]) }}"
  - add_host:
      name: "{{ item }}"
      groups: nodes
    with_items: "{{ g_node_hosts | default([]) }}"
  - add_host:
      name: "{{ item }}"
      groups: nfs
    with_items: "{{ g_nfs_hosts | default([]) }}"
  - add_host:
      name: "{{ item }}"
      groups: lb
    with_items: "{{ g_lb_hosts | default([]) }}"
  - add_host:
      name: "{{ item }}"
      groups: glusterfs
    with_items: "{{ g_glusterfs_hosts | default([]) }}"

- hosts: oo_all_hosts
  gather_facts: no
  tags: always
  tasks:
  - file:
      path: /var/run/ansible-bootstrap.lock
      owner: root
      group: root
      mode: 0644
      state: touch
  - yum:
      name: "{{ item }}"
      state: present
    with_items:
    - python-pip
  - pip:
      name: "{{ item }}"
      state: present
    with_items:
    - boto3
    - botocore
    - passlib

- import_playbook: openshift-ansible/playbooks/byo/openshift-cluster/initialize_groups.yml
- import_playbook: openshift-ansible/playbooks/common/openshift-cluster/evaluate_groups.yml

- hosts: oo_masters_to_config
  tags: master
  tasks:
  - name: Check if master node is already configured
    stat:
      path: /etc/origin
    register: prep_master
  - file:
      path: "{{ item }}"
      state: directory
      mode: 0750
      owner: root
      group: root
    with_items:
    - /etc/origin
    - /etc/origin/master
    when: prep_master.stat.exists == False
  - name: Get a list of existing master configs
    aws_s3:
      bucket: "datastore.{{ openshift_domain }}"
      region: "{{ aws_region }}"
      prefix: config/master
      marker: config/master
      mode: list
    register: existing_master_config
  - name: Download existing master configs from S3
    aws_s3:
      bucket: "datastore.{{ openshift_domain }}"
      region: "{{ aws_region }}"
      object: "/config/master/{{ item | basename }}"
      dest: "/etc/origin/master/{{ item | basename}}"
      mode: get
    with_items:
    - "{{ existing_master_config.s3_keys }}"
    when: prep_master.stat.exists == False

- hosts: oo_etcd_to_config
  tags: etcd
  tasks:
  - name: Check if etcd node is already configured
    stat:
      path: /etc/etcd
    register: prep_etcd
  - file:
      path: "{{ item }}"
      state: directory
      mode: 0750
      owner: root
      group: root
    with_items:
    - /etc/etcd
    when: prep_etcd.stat.exists == False
  - name: Get a list of existing etcd configs
    aws_s3:
      bucket: "datastore.{{ openshift_domain }}"
      region: "{{ aws_region }}"
      prefix: config/etcd
      marker: config/etcd
      mode: list
    register: existing_etcd_config
  - name: Download existing etcd configs from S3
    aws_s3:
      bucket: "datastore.{{ openshift_domain }}"
      region: "{{ aws_region }}"
      object: "/config/etcd/{{ item | basename }}"
      dest: "/etc/etcd/{{ item | basename}}"
      mode: get
    with_items:
    - "{{ existing_etcd_config.s3_keys }}"
    when: prep_etcd.stat.exists == False

- import_playbook: openshift-ansible/playbooks/byo/openshift-cluster/config.yml
  tags: always

- hosts: oo_first_master
  tags: master
  tasks:
  - name: Copy master configs to S3 bucket
    s3:
      bucket: "datastore.{{ openshift_domain }}"
      region: "{{ aws_region }}"
      object: "/config/master/{{ item }}"
      src: "/etc/origin/master/{{ item }}"
      mode: put
    with_items:
    - admin.crt
    - admin.key
    - admin.kubeconfig
    - aggregator-front-proxy.crt
    - aggregator-front-proxy.key
    - aggregator-front-proxy.kubeconfig
    - ca-bundle.crt
    - ca.crt
    - ca.key
    - ca.serial.txt
    - client-ca-bundle.crt
    - etcd.server.crt
    - etcd.server.key
    - front-proxy-ca.crt
    - frontproxy-ca.crt
    - front-proxy-ca.key
    - frontproxy-ca.key
    - frontproxy-ca.serial.txt
    - master.etcd-ca.crt
    - master.kubelet-client.crt
    - master.kubelet-client.key
    - master.proxy-client.crt
    - master.proxy-client.key
    - openshift-aggregator.crt
    - openshift-aggregator.key
    - serviceaccounts.private.key
    - serviceaccounts.public.key
    - service-signer.crt
    - service-signer.key

- hosts: oo_etcd_to_config
  tags: etcd
  tasks:
  - name: Copy etcd configs to S3 bucket
    s3:
      bucket: "datastore.{{ openshift_domain }}"
      region: "{{ aws_region }}"
      object: "/config/etcd/{{ item }}"
      src: "/etc/etcd/{{ item }}"
      mode: put
    with_items:
    - ca.crt

- hosts: oo_all_hosts
  gather_facts: no
  tags: always
  tasks:
  - file:
      path: /var/run/ansible-bootstrap.lock
      owner: root
      group: root
      mode: 0644
      state: absent
